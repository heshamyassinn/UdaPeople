version: 2.1

orbs:
  slack: circleci/slack@4.2.0
  aws-cli: circleci/aws-cli@1.3.2
  
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm --recursive s3://udapeople-${CIRCLE_WORKFLOW_ID} 
            aws cloudformation delete-stack \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            # exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration)
            #SUCCESS=1
            if (( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              cd backend
              npm run migrations:revert
            fi
            # exit 1
  
  slack-fail:
    description: Send notification to Slack
    steps:
      - slack/notify:
          channel: C01UT6EM2A0
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                      "type": "mrkdwn",
                      "text": "Failed in build #$CIRCLE_BUILD_NUM of $CIRCLE_REPOSITORY_URL ($CIRCLE_BRANCH)\n-$CIRCLE_USERNAME: $COMMIT_MESSAGE"
                  }
                }
              ]
            }
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ~/project/frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: << pipeline.id >>-frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar czf backend.tgz backend
            pwd
            ls -al
      - save_cache:
          paths:
            - ~/project/backend
            - ~/project/backend.tgz
          key: << pipeline.id >>-backend-build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend.tgz

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      # Your job code here
      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      # Your job code here
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      # Your job code here
      - run:
          name: Scan frontend dependencies
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
      - slack-fail


  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      # Your job code here
      - run:
          name: Scan backend dependencies
          command: |
             # Your code here
             cd ./backend
             npm i
             npm audit fix --audit-level=critical 
      - slack-fail


  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: install tar
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --stack-name "udapeople-backendStack-${CIRCLE_WORKFLOW_ID:0:7}" --tags project="udapeopleBackend_${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" --tags project="udapeople-frontendStack-${CIRCLE_WORKFLOW_ID:0:7}"   --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cwid=$(echo "aws ec2 describe-instances --filters 'Name=tag:project,Values=udapeopleBackend_${CIRCLE_WORKFLOW_ID:0:7}' --query 'Reservations[*].Instances[*].PublicIpAddress' --output text")
            echo $cwid > backip.sh; chmod 755 backip.sh
            backendip=$(./backip.sh)
            curl -H "Content-Type: text/plain" -H "token: d490af5f-be05-469d-afc1-dcc327a4d514" --request PUT --data "$backendip" https://api.memstash.io/values/ec2_back_ip_${CIRCLE_WORKFLOW_ID}
            cwid2=$(echo "aws ec2 describe-instances --filters 'Name=tag:project,Values="udapeopleBackend_${CIRCLE_WORKFLOW_ID:0:7}"' --query 'Reservations[*].Instances[*].PublicDnsName' --output text")
            echo $cwid2 > backurl.sh; chmod 755 backurl.sh
            backendurl=$(./backurl.sh)
            curl -H "Content-Type: text/plain" -H "token: d490af5f-be05-469d-afc1-dcc327a4d514" --request PUT --data "$backendurl" https://api.memstash.io/values/ec2_back_url_${CIRCLE_WORKFLOW_ID}
            echo "[web]" > .circleci/ansible/inventory.txt
            echo  $backendip >> .circleci/ansible/inventory.txt
            cat  .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure    
      #- destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "bc:9d:fb:17:2f:10:83:6c:b7:f7:39:a5:b5:e6:c2:36"

      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
  
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: awscli install
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            touch .env
            echo ENVIROMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            ls -latr
            cat .env
            npm i
            echo "HOST: " $TYPEORM_HOST
            echo "PWD: " $(pwd)
            echo $TYPEORM_DATABASE
            npm run migrations > migrationresult.txt
      - run:
          name: Send migration results to memstash
          command: |
            #!/bin/bash
            cd backend
            cat migrationresult.txt
            if [ $(grep -i "has been executed successfully" migrationresult.txt | wc -l) -ge 1 ]
              then 
              curl -H "Content-Type: text/plain" -H "token: d490af5f-be05-469d-afc1-dcc327a4d514" --request PUT --data "Migration Successful" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              curl -H "token: d490af5f-be05-469d-afc1-dcc327a4d514" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              else
              curl -H "Content-Type: text/plain" -H "token: d490af5f-be05-469d-afc1-dcc327a4d514" --request PUT --data "Migration Failed" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              curl -H "token: d490af5f-be05-469d-afc1-dcc327a4d514" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
     # Here's where you will add some code to rollback on failure 
     #- destroy-environment

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: .
      - run:
          name: Get backend url
          command: |
            API_IPback=$(curl -H "token: d490af5f-be05-469d-afc1-dcc327a4d514" --request GET https://api.memstash.io/values/ec2_back_ip_${CIRCLE_WORKFLOW_ID})
            export API_URL=$(echo "http://$API_IPback:3030")
            cd frontend
            echo "${API_URL}" > apiurl.txt
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            export API_URL=$(cat apiurl.txt)
            cat apiurl.txt
            npm i
            npm run build
            s3Bucket=$(echo "udapeople-${CIRCLE_WORKFLOW_ID:0:7}")
            aws s3 sync dist s3://$s3Bucket/
            s3FullUrl=("http://$s3Bucket.s3-website-us-east-2.amazonaws.com")
            curl -H "Content-Type: text/plain" -H "token: d490af5f-be05-469d-afc1-dcc327a4d514" --request PUT --data "$s3FullUrl" https://api.memstash.io/values/s3bucket_${CIRCLE_WORKFLOW_ID}
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      #- destroy-environment

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "bc:9d:fb:17:2f:10:83:6c:b7:f7:39:a5:b5:e6:c2:36"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip ansible nodejs npm less
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            [[ ! -d backend ]] && mkdir backend
            myenv="backend/.env"
            echo ENVIROMENT=production > $myenv
            echo TYPEORM_CONNECTION=postgres >> $myenv
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> $myenv
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> $myenv
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> $myenv
            echo TYPEORM_HOST=$TYPEORM_HOST >> $myenv
            echo TYPEORM_PORT=$TYPEORM_PORT >> $myenv
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> $myenv
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> $myenv
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> $myenv
            tar -cvf backend.tar backend
            ANSIBLE_HOST_KEY_CHECKING=False
            pwd
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
        #- destroy-environment
  
  smoke-test:
    docker:
      - image: python:3.7-alpine3.12 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend  Smoke test
          command: |
            back_ip=$(curl -H "token: d490af5f-be05-469d-afc1-dcc327a4d514" --request GET https://api.memstash.io/values/ec2_back_ip_${CIRCLE_WORKFLOW_ID})
            if curl -s "http://$back_ip:3030/api/status" | grep "ok"
            then
              echo "Backend alive, Proceeding"
            else
              exit 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            front_url=$(curl -H "token: d490af5f-be05-469d-afc1-dcc327a4d514" --request GET https://api.memstash.io/values/s3bucket_${CIRCLE_WORKFLOW_ID})
            if curl -s ${front_url} | grep "Welcome"
            then
              echo "Frontend alive"
            else
              exit 0
            fi
      
      
      # Here's where you will add some code to rollback on failure  
      - slack-fail
      - revert-migrations
      - destroy-environment 
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            echo "Update CloudFront"
            aws cloudformation deploy  --template-file .circleci/files/cloudfront.yml  --stack-name "Udapeople-Cloudfront"   --region ${AWS_DEFAULT_REGION}   --parameter-overrides WorkflowIDnew="f6cac72"

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar 
            yum -y install gzip
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Get Old Stack Workflow ID and Remove old stacks and files
          command: |
            originalWorkflowID="anchdvydivyaanchan"
            echo $originalWorkflowID
            if [ -n "$originalWorkflowID" ]
            then
              aws s3 rm s3://udapeople-$originalWorkflowID --recursive
              aws s3 rb s3://udapeople-$originalWorkflowID --force
              aws cloudformation delete-stack --stack-name cloudfontlocal
              aws cloudformation delete-stack --stack-name cloudfontlocal
            else
              echo "No old workflow exists"
            fi
            
      - slack-fail
      - revert-migrations
      - destroy-environment
      

workflows:
  default:
    jobs:
    - build-backend
    - build-frontend
    - test-frontend:
        requires: [build-frontend]
    - test-backend:
        requires: [build-backend]
    - scan-backend:
        requires: [test-backend]
    - scan-frontend:
        requires: [test-frontend]
    - deploy-infrastructure:
        requires: [scan-frontend, scan-backend]
        filters:
          branches:
            only:
            - main
    - configure-infrastructure:
        requires: [deploy-infrastructure]
    - run-migrations:
        requires: [configure-infrastructure]
    - deploy-frontend:
        requires: [run-migrations]
    - deploy-backend:
        requires: [deploy-frontend]
    - smoke-test:
        requires: [deploy-frontend, deploy-backend]
    - cloudfront-update:
        requires: [smoke-test]
    - cleanup:
        requires: [cloudfront-update]