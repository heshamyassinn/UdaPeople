version: 2.1

orbs:
  slack: circleci/slack@4.2.0
  aws-cli: circleci/aws-cli@1.3.2
  
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force 
            aws cloudformation delete-stack \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            # exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: f3459527-3749-4776-95f0-06cfe2b0caa0" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            # exit 1
  
  slack-fail:
    description: Send notification to Slack
    steps:
      - slack/notify:
          channel: C01UT6EM2A0
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                      "type": "mrkdwn",
                      "text": "Failed in build #$CIRCLE_BUILD_NUM of $CIRCLE_REPOSITORY_URL ($CIRCLE_BRANCH)\n-$CIRCLE_USERNAME: $COMMIT_MESSAGE"
                  }
                }
              ]
            }
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack-fail

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack-fail

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install prerequsites
          command: |            
            sudo apt -y install jq tar gzip git curl
      - run:
          name: Run frontend tests
          command: |
             cd frontend
             npm install
             npm run test
      - slack-fail
            
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install prerequsites
          command: |            
             sudo apt -y install jq tar gzip git curl
      - restore_cache:
          keys: ["backend-build"]
      - run:
          name: Run backend tests
          command: |
             cd backend
             npm install
             npm run test
      - slack-fail

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
      - slack-fail


  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - slack-fail


  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=udapeople \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
              

      # Here's where you will add some code to rollback on failure      
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            # build-frontend:
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)  

            echo "$BACKEND_IP" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            #save the new back-end url to memory
            curl -H "Content-Type: text/plain" \
              -H "token: f3459527-3749-4776-95f0-06cfe2b0caa0" --request PUT \
              --data "$BACKEND_IP" https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Dependencies
          command: |
            cat .circleci/ansible/inventory.txt
            ls ~/project/.circleci/ansible/
            cat ~/project/.circleci/ansible/inventory.txt
            yum -y install tar gzip jq npm

      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt

      - slack-fail
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "bc:9d:fb:17:2f:10:83:6c:b7:f7:39:a5:b5:e6:c2:36"

      # attach workspace
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible
            pip install awscli
      
      - run:
          name: Configure server
          command: |
            cat /tmp/.circleci/ansible/inventory.txt 
            ansible-galaxy install weareinteractive.environment
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
            
      # Here's where you will add some code to rollback on failure      
      - slack-fail
      - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:latest
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - run:
          name: Run migrations
          no_output_timeout: 30m
          command: |
            cd backend
            ENVIROMENT=$ENVIROMENT
            TYPEORM_CONNECTION=$TYPEORM_CONNECTION
            TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR
            TYPEORM_ENTITIES=$TYPEORM_ENTITIES
            TYPEORM_HOST=$TYPEORM_HOST
            TYPEORM_PORT=$TYPEORM_PORT
            TYPEORM_USERNAME=$TYPEORM_USERNAME
            TYPEORM_PASSWORD=$TYPEORM_PASSWORD
            TYPEORM_DATABASE=$TYPEORM_DATABASE
            npm config rm proxy
            npm config rm https-proxy
            npm config delete http-proxy
            npm config delete https-proxy
            set HTTP_PROXY=null
            set HTTPS_PROXY=null
            npm install
            touch migrations_log.txt
            npm run migrations >> migrations_log.txt
            cat migrations_log.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "has been executed successfully." migrations.txt
            then
            curl -H "Content-Type: text/plain" -H "token: f3459527-3749-4776-95f0-06cfe2b0caa0" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
            curl -H "Content-Type: text/plain" -H "token: f3459527-3749-4776-95f0-06cfe2b0caa0" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            SUCCESS=$(curl -H "token: f3459527-3749-4776-95f0-06cfe2b0caa0" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo "${SUCCESS}"
      # Here's where you will add some code to rollback on failure
      #- slack-fail
      #- revert-migrations
      #- destroy-environment

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip 
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_URL=`curl -H "token: f3459527-3749-4776-95f0-06cfe2b0caa0" \
            --request GET https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID:0:7}`
            API_URL=http://$BACKEND_URL:3030
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            cd frontend 
            npm install
            npm run build

      - run:
          name: Copy to S3
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID} --recursive
            
      # Here's where you will add some code to rollback on failure      
      - slack-fail
      - revert-migrations
      - destroy-environment      
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "bc:9d:fb:17:2f:10:83:6c:b7:f7:39:a5:b5:e6:c2:36"
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
                curl \
                nodejs \
                npm \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible
            pip3 install awscli
            
      - run:
          name: Deploy backend
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
            cat /tmp/.circleci/ansible/inventory.txt
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-prometheus.yml
            
      # Here's where you will add some code to rollback on failure  
      - slack-fail
      - revert-migrations
      - destroy-environment 

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: amazon/aws-cli

    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            yum -y install curl
      - attach_workspace:
            at: /tmp/.circleci/ansible
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(grep -v "[web]" /tmp/.circleci/ansible/inventory.txt)
            echo "${BACKEND_IP}"
            curl -Is http://${BACKEND_IP}:3030/api/status | head -n 1
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-frontend-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-2.amazonaws.com"
            echo $URL
            if curl -s ${URL} | grep "Welcome"
            then
              exit
            else
              exit
            fi
      
      
      # Here's where you will add some code to rollback on failure  
      - slack-fail
      - revert-migrations
      - destroy-environment 
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install jq tar gzip git curl

      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            OldWorkflowID=$(aws cloudformation \
                          list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                          --no-paginate --output text | tr -d '\n')

            curl -H "Content-Type: text/plain" -H "token: e38aee29-a976-4696-843d-2d115c52219a" \
                        --request PUT --data "${OldWorkflowID}" \
                        https://api.memstash.io/values/OldWorkflowID_${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Update cloudfront distribution
          command: |
            # update-cloudfront:
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --tags project=udapeople \
            --stack-name "udapeople-cloudfront" \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"

      
      - run:
          name: Wait for the cf stack to complete
          command : sleep 300

      # Here's where you will add some code to rollback on failure  
      - slack-fail
      - revert-migrations
      - destroy-environment 

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install jq tar gzip git curl

      - run:
          name: Remove old stacks and files
          command: |
            # get old WorkFlowId
            OldWorkflowID=$(curl -H "token: f3459527-3749-4776-95f0-06cfe2b0caa0" \
                        --request GET https://api.memstash.io/values/OldWorkflowID)
            
            echo $OldWorkflowID

            #get old Stacks
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text)

            echo $STACKS

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then        
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws s3 rb s3://udapeople-${OldWorkflowID} --force
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
            fi
            
      - slack-fail
      - revert-migrations
      - destroy-environment
      

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [test-backend]
      - scan-frontend:
          requires: [test-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #     branches:
          #       only:
          #         - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations: 
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
