version: 2.1

orbs:
  slack: circleci/slack@4.2.0
  aws-cli: circleci/aws-cli@1.3.2
  
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm --recursive s3://udapeople-${CIRCLE_WORKFLOW_ID} 
            aws cloudformation delete-stack \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            # exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration)
            #SUCCESS=1
            if (( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              cd backend
              npm run migrations:revert
            fi
            # exit 1
  
  slack-fail:
    description: Send notification to Slack
    steps:
      - slack/notify:
          channel: C01UT6EM2A0
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                      "type": "mrkdwn",
                      "text": "Failed in build #$CIRCLE_BUILD_NUM of $CIRCLE_REPOSITORY_URL ($CIRCLE_BRANCH)\n-$CIRCLE_USERNAME: $COMMIT_MESSAGE"
                  }
                }
              ]
            }
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ~/project/frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: << pipeline.id >>-frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar czf backend.tgz backend
            pwd
            ls -al
      - save_cache:
          paths:
            - ~/project/backend
            - ~/project/backend.tgz
          key: << pipeline.id >>-backend-build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend.tgz

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      # Your job code here
      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      # Your job code here
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      # Your job code here
      - run:
          name: Scan frontend dependencies
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
      - slack-fail


  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - slack-fail


  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=project4-backend workflowid=${CIRCLE_WORKFLOW_ID} \
              --stack-name prodbackend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID}  
              #exit 1 
      - run:
          name: Gather backend IP Address
          command: |
              BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID} \
              --output text)
              curl -H "Content-Type: text/plain" \
              -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT \
              --data "${BACKEND_IP}" \
              https://api.memstash.io/values/deployment

      # Here's where you will add some code to rollback on failure      
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            # build-frontend:
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=project4-frontend workflowid=${CIRCLE_WORKFLOW_ID} \
              --stack-name prodfrontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID}  
              #exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo "[web]" > ~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID} \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            #exit 1
      - save_cache:
          paths:
            - ~/project/.circleci/ansible/inventory.txt
          key: << pipeline.id >>-deploy-infra
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure    
      #- destroy-environment

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    # Environment suggestion here: https://knowledge.udacity.com/questions/484346
    environment:
      TYPEORM_CONNECTION: $TYPEORM_CONNECTION
      TYPEORM_HOST: $TYPEORM_HOST
      TYPEORM_USERNAME: $TYPEORM_USERNAME
      TYPEORM_PASSWORD: $TYPEORM_PASSWORD
      TYPEORM_DATABASE: $TYPEORM_DATABASE
      TYPEORM_MIGRATIONS: $TYPEORM_MIGRATIONS
      TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "bc:9d:fb:17:2f:10:83:6c:b7:f7:39:a5:b5:e6:c2:36"

      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
            pip3 install --upgrade pip \
              && pip3 install awscli
            #exit 1
      # - aws-cli/install
      - run:
          name: Configure server
          command: |
            # Your code here
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
            #exit 1
      # Here's where you will add some code to rollback on failure  
      - destroy-environment  

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/install
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            echo "Running migrations..."
            npm run migrations > /tmp/migrations.results
            cat /tmp/migrations.results
            if (grep "has been executed successfully" /tmp/migrations.results)
            then
            curl -H "Content-Type: text/plain" \
              -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT \
              --data "1" \
              https://api.memstash.io/values/migration
            fi
            #exit 1
            # Rollback revert migrations - https://knowledge.udacity.com/questions/502810
      # - run:
      #     name: Send migration results to memstash
      #     command: |
      #       # Your code here
      #       #exit 1
      # Here's where you will add some code to rollback on failure
      - slack-fail
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            curl --silent --location https://rpm.nodesource.com/setup_13.x | bash -
            yum -y install nodejs
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/deployment)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd frontend
            pwd
            echo "npm installing..."
            npm install
            echo "Building..."
            npm rum build
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            URL02="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-2.amazonaws.com"
            echo "S3 BUCKET URL: ${URL02}"
            aws s3 sync ~/project/frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/
      # Here's where you will add some code to rollback on failure    
      - destroy-environment 
      - empty-bucket
      - revert-migrations
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "bc:9d:fb:17:2f:10:83:6c:b7:f7:39:a5:b5:e6:c2:36"
      - attach_workspace:
          at: ~/
      # - restore_cache:
      #     keys:
      #       - << pipeline.id >>-backend-build
      #       - << pipeline.id >>-deploy-infra
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible
            pip3 install --upgrade pip \
              && pip3 install awscli
            #ansible-galaxy collection install community.general
      - run:
          name: Deploy backend
          command: |
            # your code here
            pwd
            ls -al
            cd ~
            ls -al
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
            # exit 1
      # Here's where you will add some code to rollback on failure  
      - slack-fail
      - revert-migrations
      - destroy-environment 

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add curl
            pip3 install --upgrade pip \
              && pip3 install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/deployment)
            echo "I think the Backend IP is ${BACKEND_IP}"
            echo ${BACKEND_IP} > /tmp/backend
            echo -n "The file /tmp/backend contains IP:"
            cat /tmp/backend
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            BACKEND_URL="http://$(cat /tmp/backend):3030/api/status"
            echo "curl-ing ${BACKEND_URL}"
            if curl ${BACKEND_URL}
              then exit 0
              else exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            echo "curl-ing ${URL}"
            if curl ${URL} | grep -q "Welcome"
              then exit 0
              else exit 1
            fi
      
      
      # Here's where you will add some code to rollback on failure  
      - slack-fail
      - revert-migrations
      - destroy-environment 
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            # aws cloudformation deploy \
            #   --template-file .circleci/files/cloudfront.yml \
            #   --tags project=project4-cloudfront \
            #   --stack-name udapeople-cloudfront \
            #   --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID} &
            aws cloudformation update-stack \
            --use-previous-template \
            --stack-name udapeople-cloudfront \
            --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID},UsePreviousValue=false
      # Here's where you will add some code to rollback on failure  
      - slack-fail
      - revert-migrations
      - destroy-environment 

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Find and remove old stacks
          command: |
            # your code here
            FoundWorkflowIDs=($(aws cloudformation describe-stacks \
                          --query 'Stacks[?Tags[?Key == `project` && Value == `project4-frontend` || Value == `project4-backend`]].{Parameters: Parameters[?ParameterKey == `WorkflowID`]}' \
                          --no-paginate \
                          --output text | awk '{print $3}' |sort |uniq))
            OldWorkflowID=()
            for WorkflowID in ${FoundWorkflowIDs[@]}
              do
                if [ "${WorkflowID}" = "${CIRCLE_WORKFLOW_ID}" ]
                  then continue
                  else OldWorkflowID=(${WorkflowID} ${OldWorkflowID[@]})
                fi
              done
            echo "Found Stacks with old WorkflowIDs:"
            for i in ${OldWorkflowID[@]}
              do echo ${i}
              done
            if [ ${#OldWorkflowID} -gt 0 ]
              then
                echo "Found ${#OldWorkflowID[@]} stack(s) which needs to be removed"
                for ID in ${OldWorkflowID[@]}
                  do
                    echo "Removing S3 bucket with WorkflowID: ${ID}"
                    aws s3 rm --recursive "s3://udapeople-${ID}/" &
                    echo "Removing Backend stack with WorkflowID: ${ID}"
                    aws cloudformation delete-stack --stack-name prodbackend-${ID} &
                    echo "Removing Frontend stack with WorkflowID: ${ID}"
                    aws cloudformation delete-stack --stack-name prodfrontend-${ID} &
                    sleep 10
                  done
              else
                echo "Did not find any stacks to remove."
            fi
            
      - slack-fail
      - revert-migrations
      - destroy-environment
      

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations: 
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
