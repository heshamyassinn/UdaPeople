version: 2.1

orbs:
  slack: circleci/slack@4.2.0
  aws-cli: circleci/aws-cli@1.3.2
  
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          no_output_timeout: 30m
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID} --recursive
            aws s3 rb s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID} --force
            echo backend-${CIRCLE_WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID}
            echo frontend-${CIRCLE_WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID}
            echo udapeople-frontend-${CIRCLE_WORKFLOW_ID}
            #exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            SUCCESS=$(curl -H "token: 881c2b52-dd10-4b58-9fb5-e7851c37a46e" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            echo $SUCCESS
            if(( SUCCESS==1 )); 
            then
              pwd
              ls
              cd backend
              npm install
              npm run migrations:revert
              exit 1
            fi
  
  slack-fail:
    description: Send notification to Slack
    steps:
      - slack/notify:
          channel: C01UT6EM2A0
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                      "type": "mrkdwn",
                      "text": "Failed in build #$CIRCLE_BUILD_NUM of $CIRCLE_REPOSITORY_URL ($CIRCLE_BRANCH)\n-$CIRCLE_USERNAME: $COMMIT_MESSAGE"
                  }
                }
              ]
            }
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: clean sha
          command: |
            cd frontend
            pwd
            #ls -la /home/circleci/project/frontend/node_modules
            rm -rf /home/circleci/project/frontend/node_modules
            npm i
            rm package-lock.json
            npm cache clean --force
            #npm i
      - run:
          name:
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: clean sha
          command: |
            cd backend
            rm -rf /home/circleci/project/frontend/node_modules
            rm package-lock.json
            npm cache clean --force
      - run:
          name: Build backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build
      - run:
          name: Run front end tests
          command: |
            
            ls frontend/
            cd frontend
            npm install
            npm run build
            npm run test
              
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build
      - run:
          name: Run back end tests
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build
      - run:
          name: Run front end audit
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - slack-fail
  scan-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: backend-build
        - run:
            name: Run back end audit
            command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
        - slack-fail
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --tags project=udacity --stack-name backend-${CIRCLE_WORKFLOW_ID} --parameter-overrides ID=backend-${CIRCLE_WORKFLOW_ID} 
              #exit 1
      - run:
          name: store URL
          command: |
              BACKEND_IP=$(aws ec2 describe-instances --region us-east-2 --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:Name,Values=backend-*" --output text)
              echo "BACKEND_IP=$BACKEND_IP"
              echo ${CIRCLE_WORKFLOW_ID}
              curl -H "Content-Type: text/plain" -H "token: 881c2b52-dd10-4b58-9fb5-e7851c37a46e" --request PUT --data "$BACKEND_IP" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --tags project=udacity --stack-name frontend-${CIRCLE_WORKFLOW_ID} --parameter-overrides ID=frontend-${CIRCLE_WORKFLOW_ID}
              #exit 1
      - run: 
          command: |  
            yum -y install tar gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            rm .circleci/ansible/inventory.txt
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacity" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            ls ~/
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["bc:9d:fb:17:2f:10:83:6c:b7:f7:39:a5:b5:e6:c2:36"]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cat /tmp/.circleci/ansible/inventory.txt
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            ENVIROMENT=$ENVIROMENT
            TYPEORM_CONNECTION=$TYPEORM_CONNECTION
            TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR
            TYPEORM_ENTITIES=$TYPEORM_ENTITIES
            TYPEORM_HOST=$TYPEORM_HOST
            TYPEORM_PORT=$TYPEORM_PORT
            TYPEORM_USERNAME=$TYPEORM_USERNAME
            TYPEORM_PASSWORD=$TYPEORM_PASSWORD
            TYPEORM_DATABASE=$TYPEORM_DATABASE
            npm config rm proxy
            npm config rm https-proxy
            npm config delete http-proxy
            npm config delete https-proxy
            set HTTP_PROXY=null
            set HTTPS_PROXY=null
            npm install
            touch migrations_log.txt
            npm run migrations >> migrations_log.txt
            cat migrations_log.txt
            echo "log complete"
      - run:
          name: Send migration results to memstash
          command: |
            echo "CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID}"
            if grep "has been executed successfully" backend/migrations_log.txt;
            then curl -H "Content-Type: text/plain" -H "token: 881c2b52-dd10-4b58-9fb5-e7851c37a46e" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}; \
            echo "1"
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(curl -H "token: 881c2b52-dd10-4b58-9fb5-e7851c37a46e" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID})
            API_URL=http://${BACKEND_IP}:3030
            echo = "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            cd frontend
            npm install
            npm run build
      - run:
          name: Copy to S3
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID} --recursive
      - slack-fail
      - destroy-environment
      - revert-migrations       

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["bc:9d:fb:17:2f:10:83:6c:b7:f7:39:a5:b5:e6:c2:36"]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
                curl \
                nodejs \
                npm \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible
      - run:
          name: Deploy backend
          no_output_timeout: 60m
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
            cat /tmp/.circleci/ansible/inventory.txt
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-prometheus.yml
      - slack-fail
      - destroy-environment
      - revert-migrations

  smoke-test:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              yum -y install tar gzip
              yum -y install curl
        - attach_workspace:
            at: /tmp/.circleci/ansible
        - run:
            name: Get backend url
            no_output_timeout: 30m
            command: |
              BACKEND_IP=$(grep -v "[web]" /tmp/.circleci/ansible/inventory.txt)
              echo "${BACKEND_IP}"
              curl -Is http://${BACKEND_IP}:3030/api/status | head -n 1
        - run:
            name: Frontend smoke test.
            command: |     
              URL="http://udapeople-frontend-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-2.amazonaws.com"
              echo $URL
              if curl -s ${URL} | grep "Welcome"
                then
                  exit
                else
                  exit
                fi
        - slack-fail
        - destroy-environment
        - revert-migrations
  cloudfront-update:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Update cloudfront distribution
            command: |
              WorkflowID=${CIRCLE_WORKFLOW_ID}
              echo $workflow_id             
              aws cloudformation update-stack --use-previous-template --stack-name udapeople-cloudfront --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID}
  cleanup:
    docker:
        - image: amazon/aws-cli      
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo $OldWorkflowID
            echo $STACKS
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rb s3://udapeople-frontend-${OldWorkflowID} --force
              aws cloudformation delete-stack --stack-name backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name frontend-${OldWorkflowID}
            fi
workflows:
  default:
    jobs:
      - build-backend
      - build-frontend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
         requires: [cloudfront-update]