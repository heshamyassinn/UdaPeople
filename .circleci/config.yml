version: 2.1

orbs:
  slack: circleci/slack@4.2.0
  aws-cli: circleci/aws-cli@1.3.2
  
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force  
            aws cloudformation delete-stack \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl -H "token: 93c94f94-9308-477b-a12b-d9757b98cba5" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 )); 
            then
            cd ~/project/backend
            npm install
            npm run migrations:revert
            fi
  
  slack-fail:
    description: Send notification to Slack
    steps:
      - slack/notify:
          channel: C01UT6EM2A0
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                      "type": "mrkdwn",
                      "text": "Failed in build #$CIRCLE_BUILD_NUM of $CIRCLE_REPOSITORY_URL ($CIRCLE_BRANCH)\n-$CIRCLE_USERNAME: $COMMIT_MESSAGE"
                  }
                }
              ]
            }
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install prerequsites
          command: |            
            sudo apt -y install jq tar gzip git curl
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            sudo npm i
            sudo npm run build
      - save_cache:
          paths: ~/project/frontend/node_modules
          key: frontend-build
      - slack-fail

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install prerequsites
          command: |            
            sudo apt -y install jq tar gzip git curl
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: ~/project/backend/node_modules
          key: backend-build
      - slack-fail

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - run:
          name: Install prerequsites
          command: |            
            sudo apt -y install jq tar gzip git curl
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm i
            npm run test
      - slack-fail
            
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - run:
          name: Install prerequsites
          command: |            
            sudo apt -y install jq tar gzip git curl
      - restore_cache:
          keys: ["backend-build"]
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm run test
      - slack-fail

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - run:
          name: Install prerequsites
          command: |            
            sudo apt -y install jq tar gzip git curl
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack-fail


  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - run:
          name: Install prerequsites
          command: |            
            sudo apt -y install jq tar gzip git curl
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack-fail


  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install prerequsites
          command: |
            yum -y install tar gzip jq git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"\
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"\
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=`aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].[PublicDnsName]" \
              --output text | tr -d '\n'`

            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

            #save the new back-end url to memory
            curl -H "Content-Type: text/plain" \
              -H "token: 93c94f94-9308-477b-a12b-d9757b98cba5" --request PUT \
              --data "$BACKEND_IP" https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID:0:7}

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            # build-frontend:
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      
      - slack-fail
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "08:d1:57:80:3f:61:d1:dc:35:66:ef:f1:95:e0:ba:1f"

      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=false
            cd .circleci/ansible
            ansible-playbook configure-server.yml -i inventory.txt
    
      # Here's where you will add some code to rollback on failure      
      - slack-fail
      - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Create .env file
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > /temp/migration.log
            export migration_status=$(cat /temp/migration.log | grep -c "has been executed successfully")
      - run:
          name: Send migration results to memstash
          command: |
            if [ $migration_status > 0 ] 
            then
              curl -H "Content-Type: text/plain" \
                  -H "token: 93c94f94-9308-477b-a12b-d9757b98cba5" \
                  --request PUT --data "1" \
                  https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              else
                  echo "No migration"
            fi
      # Here's where you will add some code to rollback on failure
      - slack-fail
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_12.x | bash -
            yum -y install nodejs npm tar gzip jq git
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=`curl -H "token: 93c94f94-9308-477b-a12b-d9757b98cba5" \
            --request GET https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID:0:7}`
            export API_URL="https://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Build frontend
          command: |            
            cd frontend
            npm i

            BACKEND_IP=`curl -H "token: 93c94f94-9308-477b-a12b-d9757b98cba5" \
            --request GET https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID:0:7}`
            export API_URL="https://${BACKEND_IP}:3030"
            export NODE_ENV=production
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            cp test.env ./dist/
            # deploy to s3 bucket
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - run:
          name: Create S3 bucket url
          command: |
            LOCATION=`aws s3api get-bucket-location --bucket udapeople-${CIRCLE_WORKFLOW_ID:0:7} --output text | tr -d '\n'`
            S3_URL="udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.amazonaws.com/index.html"
            echo $S3_URL

            curl -H "Content-Type: text/plain" \
            -H "token: 93c94f94-9308-477b-a12b-d9757b98cba5" \
            --request PUT --data "$S3_URL" \
            https://api.memstash.io/values/S3_URL_${CIRCLE_WORKFLOW_ID:0:7}
            
      # Here's where you will add some code to rollback on failure      
      - slack-fail
      - revert-migrations
      - destroy-environment      
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: willhallonline/ansible:2.10-ubuntu-18.04
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "08:d1:57:80:3f:61:d1:dc:35:66:ef:f1:95:e0:ba:1f"
      - run:
          name: Install dependencies
          command: |
            apt -y update
            apt -y install jq tar gzip git curl
            curl -sL https://deb.nodesource.com/setup_12.x | bash -
            apt -y install nodejs
      # - restore_cache:
      #     keys: ["backend-build"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            #export NODE_ENV=production
            npm run build
            cp package* ./dist
            cd dist
            tar -czvf ../app.tar.gz ./*
      - run:
          name: Deploy backend
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            cd .circleci/ansible
            ansible-playbook deploy-backend.yml -i inventory.txt
            
      # Here's where you will add some code to rollback on failure  
      - slack-fail
      - revert-migrations
      - destroy-environment 

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: amazon/aws-cli

    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install jq tar gzip git curl
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.amazonaws.com/index.html"
            echo $URL
            if curl -s ${URL} | grep "Welcome";
            then
              exit 0
            else
              exit 1
            fi
      # - run:
      #     name: Backend smoke test.
      #     command: |
      #       BACKEND_IP=`curl -H "token: 93c94f94-9308-477b-a12b-d9757b98cba5" \
      #       --request GET https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID:0:7}`
      #       echo $BACKEND_IP
      #       curl -s https://${BACKEND_IP}:3030/api/status | grep "\"status\":\"ok\""
      
      # Here's where you will add some code to rollback on failure  
      - slack-fail
      - revert-migrations
      - destroy-environment 
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install jq tar gzip git curl

      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --tags project=udapeople \
            --stack-name "udapeople-cloudfront" \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"

      # Here's where you will add some code to rollback on failure  
      - slack-fail
      - revert-migrations
      - destroy-environment 

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install jq tar gzip git curl
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo $OldWorkflowID

      - run:
          name: Get lists of stacks
          command: |
            # your code here
            OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                              --stack-status-filter CREATE_COMPLETE --no-paginate --output text | tr -d '\n')
            echo $STACKS

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then        
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
            fi
            
      - slack-fail

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
              branches:
                only:
                  - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations: ##
      #     requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [configure-infrastructure]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]